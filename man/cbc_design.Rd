% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/design.R
\name{cbc_design}
\alias{cbc_design}
\title{Generate survey designs for choice experiments}
\usage{
cbc_design(
  profiles,
  n_alts,
  n_q,
  n_resp,
  n_blocks = 1,
  n_start = 5,
  method = "random",
  priors = NULL,
  no_choice = FALSE,
  label = NULL,
  randomize_questions = TRUE,
  randomize_alts = TRUE,
  max_iter = 50,
  parallel = FALSE,
  remove_dominant = FALSE,
  dominance_types = c("total", "partial"),
  dominance_threshold = 0.8,
  max_dominance_attempts = 10
)
}
\arguments{
\item{profiles}{A data frame of class \code{cbc_profiles} created using the
\code{cbc_profiles()} function.}

\item{n_alts}{Number of alternatives per choice question.}

\item{n_q}{Number of questions per respondent (or per block).}

\item{n_resp}{Number of survey respondents.}

\item{n_blocks}{Number of blocks in the design. Each block contains \code{n_q} questions.
Defaults to \code{1}. When \code{n_blocks > 1}, the design will contain multiple versions
that can be distributed across respondents.}

\item{n_start}{A numeric value indicating the number of random start designs
to use in obtaining a D-efficient design. Defaults to \code{5}.}

\item{method}{Choose the design method to use. Currently supports \code{"sequential"}
for D-efficient designs and \code{"random"} for random designs.
Defaults to \code{"random"}.}

\item{priors}{A \code{cbc_priors} object created by \code{cbc_priors()}, or \code{NULL} for
random designs. Required for D-efficient designs.}

\item{no_choice}{Include a "no choice" option in the choice sets? Defaults to
\code{FALSE}. If \code{TRUE}, the total number of alternatives per question will be
one more than the provided \code{n_alts} argument.}

\item{label}{The name of the variable to use in a "labeled" design (also
called an "alternative-specific" design). If used, the \code{n_alts} argument
will be ignored. Defaults to \code{NULL}.}

\item{randomize_questions}{Randomize question order for each respondent? Defaults to \code{TRUE}.}

\item{randomize_alts}{Randomize alternative order within questions? Defaults to \code{TRUE}.}

\item{max_iter}{Maximum number of iterations for D-efficient optimization.
Defaults to \code{50}.}

\item{parallel}{Logical value indicating whether to use parallel processing.
Defaults to \code{FALSE}.}

\item{remove_dominant}{Logical. If \code{TRUE}, removes choice sets where one
alternative dominates others based on the provided priors. Only works when
\code{priors} are provided. Defaults to \code{FALSE}.}

\item{dominance_types}{Character vector specifying which types of dominance
to check for. Options are \code{"total"} and/or \code{"partial"}. Defaults to \code{c("total", "partial")}.}

\item{dominance_threshold}{Numeric. Threshold for total dominance detection.
Defaults to \code{0.8}.}

\item{max_dominance_attempts}{Integer. Maximum number of replacement
attempts when removing dominant choice sets. Defaults to \code{10}.}
}
\value{
A \code{cbc_design} object containing the experimental design with these components:
\itemize{
\item \strong{Design data}: Each row is an alternative, with columns for \code{profileID}, \code{blockID},
\code{respID}, \code{qID}, \code{altID}, \code{obsID}, and attribute values
\item \strong{Metadata}: Stored as attributes including design parameters, efficiency metrics,
and the original profiles
\item \strong{D-error}: Design efficiency measure (lower is better)
}
}
\description{
This function creates experimental designs (DOE) for choice-based conjoint experiments.
The design represents the choice questions that will be shown to a single respondent
(or single block). To create a complete survey with multiple respondents, pass the
result to \code{cbc_survey()} or use \code{cbc_survey()} directly with profiles.
}
\examples{
library(cbcTools)

# Create profiles
profiles <- cbc_profiles(
  price = c(1, 2, 3, 4),
  type = c("A", "B", "C"),
  quality = c("Low", "High")
)

# Create priors
priors <- cbc_priors(
  profiles = profiles,
  price = -0.5,
  type = c(0.2, 0.3),
  quality = 0.4
)

# Generate D-efficient design
design <- cbc_design(
  profiles = profiles,
  n_alts = 3,
  n_q = 6,
  priors = priors,
  method = "sequential"
)

# Inspect the design
print(design)
cbc_inspect_balance(design)

# Check D-error
d_error <- cbc_error(design, priors = priors)
}
